<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>回滚莫队算法</title>
      <link href="/2024/03/03/hgmq/"/>
      <url>/2024/03/03/hgmq/</url>
      
        <content type="html"><![CDATA[<h1 id="例题：歴史の研究"><a href="#例题：歴史の研究" class="headerlink" title="例题：歴史の研究"></a>例题：<a href="https://www.luogu.com.cn/problem/AT_joisc2014_c">歴史の研究</a></h1><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>IOI 国历史研究的第一人——JOI 教授，最近获得了一份被认为是古代 IOI 国的住民写下的日记。JOI 教授为了通过这份日记来研究古代 IOI 国的生活，开始着手调查日记中记载的事件。</p><p>日记中记录了连续 $N$ 天发生的事件，大约每天发生一件。</p><p>事件有种类之分。第 $i$ 天发生的事件的种类用一个整数 $X_i$<br>表示，$X_i$ 越大，事件的规模就越大。</p><p>JOI 教授决定用如下的方法分析这些日记：</p><ul><li><p>选择日记中连续的几天 $[L,R]$ 作为分析的时间段；</p></li><li><p>定义事件 $A$ 的重要度 $W_A$ 为 $A\times T_A$，其中 $T_A$ 为该事件在区间 $[L,R]$ 中出现的次数。</p></li></ul><p>现在，您需要帮助教授求出所有事件中重要度最大的事件是哪个，<strong>并输出其重要度</strong>。</p><p>注意：教授有多组询问。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个空格分隔的整数 $N$ 和 $Q$，表示日记一共记录了 $N$ 天，询问有 $Q$ 次。</p><p>接下来一行 $N$ 个空格分隔的整数表示每天的事件种类。</p><p>接下来 $Q$ 行，每行给出 $L,R$ 表示一组询问。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共有 $Q$ 行，每行一个整数，表示对应的询问的答案。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 $100%$ 的数据，$1\le Q,N\le 10^5$，$1\le X\le 10^9$，$1\le L\le R\le 10^5$。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">9 </span><span class="number">8</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">8</span><br><span class="line">8</span><br><span class="line">16</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">8 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">9 </span><span class="number">9</span> <span class="number">19</span> <span class="number">9</span> <span class="number">9</span> <span class="number">15</span> <span class="number">9</span> <span class="number">19</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">27</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">19</span><br></pre></td></tr></table></figure><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入 #3"></a>样例输入 #3</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">12 </span><span class="number">15</span></span><br><span class="line"><span class="symbol">15 </span><span class="number">9</span> <span class="number">3</span> <span class="number">15</span> <span class="number">9</span> <span class="number">3</span> <span class="number">3</span> <span class="number">8</span> <span class="number">16</span> <span class="number">9</span> <span class="number">3</span> <span class="number">17</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">10</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">10</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">8</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出 #3"></a>样例输出 #3</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">18</span><br><span class="line">18</span><br><span class="line">9</span><br><span class="line">30</span><br><span class="line">18</span><br><span class="line">15</span><br><span class="line">17</span><br><span class="line">30</span><br><span class="line">18</span><br><span class="line">15</span><br><span class="line">18</span><br><span class="line">16</span><br><span class="line">30</span><br><span class="line">15</span><br><span class="line">15</span><br></pre></td></tr></table></figure><hr><h2 id="一、回滚莫队算法"><a href="#一、回滚莫队算法" class="headerlink" title="一、回滚莫队算法"></a>一、回滚莫队算法</h2><p>分析题目，没有修改，只有问询，似乎只是一个普通莫队。但如果用普通莫队去做就会发现写不了删点操作，因为无法确定删除掉的是不是最大的那个。</p><p>所以我们就改变一下思路：<br>既然删点难写那么咱们就改变思路：不删点。<br>但每个问询区间大小不一，无法保持只加点不删点。<br>其实可以保持右端点只增不减，对于左端每次增点后用暴力把增点数据删除（即回滚）即可。</p><p><img src="https://cdn.acwing.com/media/article/image/2024/02/16/58452_a1a737dccc-8330_15bc7d0015-BZOJ4241-01.jpg" alt="8330_15bc7d0015-BZOJ4241-01.jpg"> </p><p>由于要保证右端点只增不减，即不能使用奇偶优化。排序函数这么写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(q, q + m, [&amp;](<span class="type">const</span> Query &amp;x, <span class="type">const</span> Query &amp;y) &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="built_in">get</span>(x.l), j = <span class="built_in">get</span>(y.l);</span><br><span class="line">        <span class="comment">// 回滚莫队不能用奇偶优化</span></span><br><span class="line">        <span class="keyword">if</span>(i == j) <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">        <span class="keyword">return</span> i &lt; j;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h2><h3 id="时间复杂度：-O-M-sqrt-N"><a href="#时间复杂度：-O-M-sqrt-N" class="headerlink" title="时间复杂度：$O(M\sqrt{N})$"></a>时间复杂度：$O(M\sqrt{N})$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, l, r;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line">LL res[N];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, LL &amp;sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[x] ++;</span><br><span class="line">    sum = <span class="built_in">max</span>(sum, (LL)cnt[x] * nums[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line">        a[i] = <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), a[i]) - nums.<span class="built_in">begin</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        q[i] = &#123;i, l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(q, q + m, [&amp;](<span class="type">const</span> Query &amp;x, <span class="type">const</span> Query &amp;y) &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="built_in">get</span>(x.l), j = <span class="built_in">get</span>(y.l);</span><br><span class="line">        <span class="comment">// 回滚莫队不能用奇偶优化</span></span><br><span class="line">        <span class="keyword">if</span>(i == j) <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">        <span class="keyword">return</span> i &lt; j;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt; m; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = x;</span><br><span class="line">        <span class="keyword">while</span>(y &lt; m &amp;&amp; <span class="built_in">get</span>(q[x].l) == <span class="built_in">get</span>(q[y].l)) y ++;</span><br><span class="line">        <span class="comment">// 当前块最靠右的端点: k * len + len - 1</span></span><br><span class="line">        <span class="type">int</span> mr = <span class="built_in">get</span>(q[x].l) * len + (len - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 暴力求解块内</span></span><br><span class="line">        <span class="keyword">while</span>(x &lt; y &amp;&amp; <span class="built_in">get</span>(q[x].l) == <span class="built_in">get</span>(q[x].r))</span><br><span class="line">        &#123;</span><br><span class="line">            LL sum = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> id = q[x].id, l = q[x].l, r = q[x].r;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) <span class="built_in">add</span>(a[i], sum);</span><br><span class="line">            res[id] = sum;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) cnt[a[i]] --;</span><br><span class="line">            x ++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求解块间</span></span><br><span class="line">        LL sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = mr, j = mr + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &lt; y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id = q[x].id, l = q[x].l, r = q[x].r;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; r) <span class="built_in">add</span>(a[++ i], sum);</span><br><span class="line">            <span class="comment">// 每次备份块外的sum, 后续回滚</span></span><br><span class="line">            LL backup = sum;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; l) <span class="built_in">add</span>(a[-- j], sum);</span><br><span class="line">            res[id] = sum;</span><br><span class="line">            <span class="comment">// 回滚</span></span><br><span class="line">            <span class="keyword">while</span>(j &lt; mr + <span class="number">1</span>) cnt[a[j ++]] --;</span><br><span class="line">            sum = backup;</span><br><span class="line">            x ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每次记得清空cnt, 保证每块的操作前, cnt数组是空的</span></span><br><span class="line">        <span class="comment">// 只会执行sqrt(n)次, 不会影响时间复杂度</span></span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>朴素莫队算法</title>
      <link href="/2024/03/02/mq/"/>
      <url>/2024/03/02/mq/</url>
      
        <content type="html"><![CDATA[<h1 id="例题：HH的项链"><a href="#例题：HH的项链" class="headerlink" title="例题：HH的项链"></a>例题：<a href="https://www.luogu.com.cn/problem/P1972">HH的项链</a></h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>$HH$有一串由各种漂亮的贝壳组成的项链。$HH$ 相信不同的贝壳会带来好运，所以每次散步完后，他都会随意取出一段贝壳，思考它们所表达的含义。$HH$ 不断地收集新的贝壳，因此，他的项链变得越来越长。  </p><p>有一天，他突然提出了一个问题：某一段贝壳中，包含了多少种不同的贝壳？这个问题很难回答…… 因为项链实在是太长了。于是，他只好求助睿智的你，来解决这个问题。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行一个正整数 $n$，表示项链长度。<br>第二行 $n$ 个正整数 $a_i$，表示项链中第 $i$ 个贝壳的种类。</p><p>第三行一个整数 $m$，表示 HH 询问的个数。<br>接下来 $m$ 行，每行两个整数 $l,r$，表示询问的区间。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出 $m$ 行，每行一个整数，依次表示询问对应的答案。</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】  </p><p>对于 $20%$ 的数据，$1\le n,m\leq 5000$；<br>对于 $40%$ 的数据，$1\le n,m\leq 10^5$；<br>对于 $60%$ 的数据，$1\le n,m\leq 5\times 10^5$；<br>对于 $100%$ 的数据，$1\le n,m,a_i \leq 10^6$，$1\le l \le r \le n$。</p><p>本题可能需要较快的读入方式，最大数据点读入数据约 20MB</p><hr><h2 id="一、暴力算法"><a href="#一、暴力算法" class="headerlink" title="一、暴力算法"></a>一、暴力算法</h2><p>直接暴力枚举询问，然后再枚举区间，这样是$O(n^2)$的</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>如果说询问是按照左端点递增和右端点递增的，<br>那么就可以离线排序，用线性的时间扫过去所有询问，用哈希表记录一下就行，同时记录答案。<br>但是两个端点不能同时递增的，最多保证一个递增。</p><hr><h2 id="二、莫队算法"><a href="#二、莫队算法" class="headerlink" title="二、莫队算法"></a>二、莫队算法</h2><p>把询问的左端点按照分块的思想分成$\sqrt{n}$块，然后每一块里面的询问$[l,r]$按照右端点递增排序。</p><p>在块中：询问区间的右端点是递增的，但是区间的左端点不是递增的；</p><p>在块间：左端点是递增的，而右端点不是递增的**(这样就需要指针的移动和回滚，才有了下面的奇偶优化)**。</p><p>定义两个指针$tt$(向$r$靠齐)，$hh$(向$l$靠齐)，<br>然后开始遍历排好序的询问，枚举每个询问$[l,r]$，移动$hh$，$tt$，分别向$l$，$r$靠齐，<br>同时用一个哈希表记录一下数字出现的个数，同时更新答案即可。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>原序列被分成$\sqrt{n}$块，每块长度是$\sqrt{n}$，每块中的询问按照询问右端点递增排序。</p><p>那么：</p><p>$tt$(向$r$靠齐)指针在每一块中，最坏可能移动$n$次，有$\sqrt{n}$块，所以是$O(n\sqrt{n})$。</p><p>$hh$(向$l$靠齐)指针如果在块中移动，最多移动$\sqrt{n}$次。在块间，则最多移动2$\sqrt{n}$次(从这一块的头移动到下一块的尾)。</p><p>最终，双指针时间复杂度取最大值，即为$O(n\sqrt{n})$。</p><h3 id="奇偶优化"><a href="#奇偶优化" class="headerlink" title="奇偶优化"></a>奇偶优化</h3><p>由于每一块中右端点是按从小到大排序的，所以每一块在滚$i$指针时。<br>滚到最后大概率会滚到整个序列的末尾，然后处理下一块时，右端点$r$又是从小到大排的。<br>所以$i$得从后面滚回来前面这个$r$，这样就浪费了时间。</p><p>如果按奇数块右端点递增排序,偶数块右端点递减排序。<br>那么指针$i$滚到末尾，然后下一块又是递减排序的话，则可以直接开始滚了，不用滚回来再从新开始。</p><hr><h2 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h2><h3 id="时间复杂度：-O-M-sqrt-N"><a href="#时间复杂度：-O-M-sqrt-N" class="headerlink" title="时间复杂度：$O(M\sqrt{N})$"></a>时间复杂度：$O(M\sqrt{N})$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>, M = <span class="number">1000010</span>, K = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, l, r;</span><br><span class="line">&#125; q[M];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> cnt[K], len;</span><br><span class="line"><span class="type">int</span> res[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span>&amp; ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt[x] == <span class="number">0</span>) ans ++;</span><br><span class="line">    cnt[x] ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span>&amp; ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[x] --;</span><br><span class="line">    <span class="keyword">if</span>(cnt[x] == <span class="number">0</span>) ans --;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        q[i] = &#123;i, l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(q, q + m, [&amp;](<span class="type">const</span> query&amp; x, <span class="type">const</span> query&amp; y) &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="built_in">get</span>(x.l), j = <span class="built_in">get</span>(y.l); </span><br><span class="line">        <span class="keyword">if</span>(i == j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 奇升偶降优化</span></span><br><span class="line">            <span class="keyword">if</span>(i &amp; <span class="number">1</span>) <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> y.r &lt; x.r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i &lt; j;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// tt为双指针的右指针, hh为双指针的左指针</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>, tt = <span class="number">0</span>, hh = <span class="number">1</span>; k &lt; m; k ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> id = q[k].id, l = q[k].l, r = q[k].r;</span><br><span class="line">        <span class="keyword">while</span>(tt &lt; r) <span class="built_in">add</span>(a[++ tt], sum);</span><br><span class="line">        <span class="keyword">while</span>(tt &gt; r) <span class="built_in">del</span>(a[tt --], sum);</span><br><span class="line">        <span class="keyword">while</span>(hh &lt; l) <span class="built_in">del</span>(a[hh ++], sum);</span><br><span class="line">        <span class="keyword">while</span>(hh &gt; l) <span class="built_in">add</span>(a[-- hh], sum);</span><br><span class="line">        res[id] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、树状数组（正解）"><a href="#四、树状数组（正解）" class="headerlink" title="四、树状数组（正解）"></a>四、树状数组（正解）</h2><h3 id="时间复杂度：-O-MlogN"><a href="#时间复杂度：-O-MlogN" class="headerlink" title="时间复杂度：$O(MlogN)$"></a>时间复杂度：$O(MlogN)$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>, M = <span class="number">1000010</span>, K = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], last[K];</span><br><span class="line"><span class="type">int</span> res[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Query &amp;x) &#123; <span class="keyword">return</span> r &lt; x.r; &#125;</span><br><span class="line">&#125; q[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) tr[i] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        q[i] = &#123;i, l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q, q + m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(last[a[i]]) <span class="built_in">add</span>(last[a[i]], <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">add</span>(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(j &lt; m &amp;&amp; q[j].r == i) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id = q[j].id, l = q[j].l;</span><br><span class="line">            res[id] = <span class="built_in">query</span>(i) - <span class="built_in">query</span>(l - <span class="number">1</span>);</span><br><span class="line">            j ++;</span><br><span class="line">        &#125;</span><br><span class="line">        last[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
