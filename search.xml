<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树套树</title>
      <link href="/2024/03/04/tree_in_tree/"/>
      <url>/2024/03/04/tree_in_tree/</url>
      
        <content type="html"><![CDATA[<h1 id="例题：树套树"><a href="#例题：树套树" class="headerlink" title="例题：树套树"></a>例题：<a href="https://www.luogu.com.cn/problem/P3380">树套树</a></h1><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>您需要写一种数据结构（可参考题目标题），来维护一个有序数列，其中需要提供以下操作：</p><ol><li><p>查询 $k$ 在区间内的排名</p></li><li><p>查询区间内排名为 $k$ 的值</p></li><li><p>修改某一位值上的数值</p></li><li><p>查询 $k$ 在区间内的前驱（前驱定义为严格小于 $x$，且最大的数，<strong>若不存在输出 -2147483647</strong>）</p></li><li><p>查询 $k$ 在区间内的后继（后继定义为严格大于 $x$，且最小的数，<strong>若不存在输出 2147483647</strong>）</p></li></ol><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个数 $n,m$，表示长度为 $n$ 的有序序列和 $m$ 个操作。</p><p>第二行有 $n$ 个数，表示有序序列。</p><p>下面有 $m$ 行，$opt$ 表示操作标号。</p><p>若 $opt&#x3D;1$，则为操作 $1$，之后有三个数 $l、r、k$，表示查询 $k$ 在区间 $[l,r]$ 的排名。</p><p>若 $opt&#x3D;2$，则为操作 $2$，之后有三个数 $l、r、k$，表示查询区间 $[l,r]$ 内排名为 $k$ 的数。</p><p>若 $opt&#x3D;3$，则为操作 $3$，之后有两个数 $pos、k$，表示将 $pos$ 位置的数修改为 $k$。</p><p>若 $opt&#x3D;4$，则为操作 $4$，之后有三个数 $l、r、k$，表示查询区间 $[l,r]$ 内 $k$ 的前驱。</p><p>若 $opt&#x3D;5$，则为操作 $5$，之后有三个数 $l、r、k$，表示查询区间 $[l,r]$ 内 $k$ 的后继。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于操作 $1,2,4,5$，各输出一行，表示查询结果。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">9 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">9</span> <span class="number">4</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">5</span> <span class="number">9</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span> <span class="number">9</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">2</span> <span class="number">8</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>$1\le n,m\le5\times 10^4$，序列中的值在任何时刻 $\in[0,10^8]$。<br><strong>（特别提醒：此数据不保证操作 4、5 一定存在，故请务必考虑不存在的情况。）</strong></p><hr><h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p><img src="https://cdn.acwing.com/media/article/image/2024/03/04/58452_6d314959da-405fa2d86fb2eb7d1f4501b6c4b9c05.png" alt="405fa2d86fb2eb7d1f4501b6c4b9c05.png"><br>可使用<strong>线段树</strong>套<strong>平衡树</strong>来实现，即线段树的每个结点内都是一棵平衡树</p><p>这里使用线段树套$Splay$树</p><hr><h2 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h2><h4 id="时间复杂度：-O-Mlog-3N"><a href="#时间复杂度：-O-Mlog-3N" class="headerlink" title="时间复杂度：$O(Mlog^3N)$"></a>时间复杂度：$O(Mlog^3N)$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>, M = <span class="number">38</span> * N, INF = <span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">2</span>], p;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _val, <span class="type">int</span> _p)</span> </span>&#123; s[<span class="number">0</span>] = s[<span class="number">1</span>] = <span class="number">0</span>, p = _p, val = _val, size = <span class="number">1</span>; &#125;</span><br><span class="line">&#125; tr[M];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> L[N &lt;&lt; <span class="number">2</span>], R[N &lt;&lt; <span class="number">2</span>], ROOT[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[u].size = tr[tr[u].s[<span class="number">0</span>]].size + tr[tr[u].s[<span class="number">1</span>]].size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">    <span class="type">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line">    </span><br><span class="line">    tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x, tr[x].p = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].p = y;</span><br><span class="line">    tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].p = x;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> &amp;root, <span class="type">int</span> x, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(tr[x].p != k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">        <span class="keyword">if</span>(z != k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((tr[z].s[<span class="number">1</span>] == y) == (tr[y].s[<span class="number">1</span>] == x)) <span class="built_in">rotate</span>(y);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) root = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;root, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = root, p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(u) p = u, u = tr[u].s[val &gt; tr[u].val];</span><br><span class="line">    u = ++ idx;</span><br><span class="line">    <span class="keyword">if</span>(p) tr[p].s[val &gt; tr[p].val] = u;</span><br><span class="line">    tr[u].<span class="built_in">init</span>(val, p);</span><br><span class="line">    <span class="built_in">splay</span>(root, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[u] = l, R[u] = r;</span><br><span class="line">    <span class="built_in">insert</span>(ROOT[u], -INF), <span class="built_in">insert</span>(ROOT[u], INF);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) <span class="built_in">insert</span>(ROOT[u], a[i]);</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;root, <span class="type">int</span> y, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].val == y) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[u].val &lt; y) u = tr[u].s[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> u = tr[u].s[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(root, u, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> l = tr[u].s[<span class="number">0</span>], r = tr[u].s[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(tr[l].s[<span class="number">1</span>]) l = tr[l].s[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(tr[r].s[<span class="number">0</span>]) r = tr[r].s[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">splay</span>(root, l, <span class="number">0</span>), <span class="built_in">splay</span>(root, r, l);</span><br><span class="line">    tr[r].s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushup</span>(r), <span class="built_in">pushup</span>(l);</span><br><span class="line">    <span class="built_in">insert</span>(root, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> pos, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">update</span>(ROOT[u], a[pos], x);</span><br><span class="line">    <span class="keyword">if</span>(L[u] &gt;= R[u]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = L[u] + R[u] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, pos, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_cnt</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].val &lt; x) cnt += tr[tr[u].s[<span class="number">0</span>]].size + <span class="number">1</span>, u = tr[u].s[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> u = tr[u].s[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_pre</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = -INF;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].val &lt; x) res = <span class="built_in">max</span>(res, tr[u].val), u = tr[u].s[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> u = tr[u].s[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_suc</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = INF;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].val &gt; x) res = <span class="built_in">min</span>(res, tr[u].val), u = tr[u].s[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> u = tr[u].s[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_cnt</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L[u] &gt;= l &amp;&amp; R[u] &lt;= r) <span class="keyword">return</span> <span class="built_in">get_cnt</span>(ROOT[u], x) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid = L[u] + R[u] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) cnt += <span class="built_in">query_cnt</span>(u &lt;&lt; <span class="number">1</span>, l, r, x);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) cnt += <span class="built_in">query_cnt</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, x);</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_pre</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L[u] &gt;= l &amp;&amp; R[u] &lt;= r) <span class="keyword">return</span> <span class="built_in">get_pre</span>(ROOT[u], x);</span><br><span class="line">    <span class="type">int</span> mid = L[u] + R[u] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res = -INF;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) res = <span class="built_in">max</span>(res, <span class="built_in">query_pre</span>(u &lt;&lt; <span class="number">1</span>, l, r, x));</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) res = <span class="built_in">max</span>(res, <span class="built_in">query_pre</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, x));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_suc</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L[u] &gt;= l &amp;&amp; R[u] &lt;= r) <span class="keyword">return</span> <span class="built_in">get_suc</span>(ROOT[u], x);</span><br><span class="line">    <span class="type">int</span> mid = L[u] + R[u] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res = INF;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) res = <span class="built_in">min</span>(res, <span class="built_in">query_suc</span>(u &lt;&lt; <span class="number">1</span>, l, r, x));</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) res = <span class="built_in">min</span>(res, <span class="built_in">query_suc</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, x));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l, r, x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query_cnt</span>(<span class="number">1</span>, l, r, x) + <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l, r, k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">1e8</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = left + right + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">query_cnt</span>(<span class="number">1</span>, l, r, mid) &gt;= k) right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> pos, x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;pos, &amp;x);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, pos, x);</span><br><span class="line">            a[pos] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l, r, x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">            <span class="type">int</span> res = <span class="built_in">query_pre</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">            <span class="keyword">if</span>(res == -INF) <span class="built_in">puts</span>(<span class="string">&quot;-2147483647&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l, r, x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">            <span class="type">int</span> res = <span class="built_in">query_suc</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">            <span class="keyword">if</span>(res == INF) <span class="built_in">puts</span>(<span class="string">&quot;2147483647&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Splay </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伸展树</title>
      <link href="/2024/03/03/splay/"/>
      <url>/2024/03/03/splay/</url>
      
        <content type="html"><![CDATA[<h1 id="例题：维护序列"><a href="#例题：维护序列" class="headerlink" title="例题：维护序列"></a>例题：<a href="https://www.luogu.com.cn/problem/P2042">维护序列</a></h1><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>请写一个程序，要求维护一个数列，支持以下 $6$ 种操作：</p><table><thead><tr><th align="center">编号</th><th align="center">名称</th><th align="center">格式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">插入</td><td align="center">$\operatorname{INSERT}\ posi \ tot \ c_1 \ c_2 \cdots c_{tot}$</td><td align="left">在当前数列的第 $posi$ 个数字后插入 $tot$ 个数字：$c_1, c_2 \cdots c_{tot}$；若在数列首插入，则 $posi$ 为 $0$</td></tr><tr><td align="center">2</td><td align="center">删除</td><td align="center">$\operatorname{DELETE} \ posi \ tot$</td><td align="left">从当前数列的第 $posi$ 个数字开始连续删除 $tot$ 个数字</td></tr><tr><td align="center">3</td><td align="center">修改</td><td align="center">$\operatorname{MAKE-SAME} \ posi \ tot \ c$</td><td align="left">从当前数列的第 $posi$ 个数字开始的连续 $tot$ 个数字统一修改为 $c$</td></tr><tr><td align="center">4</td><td align="center">翻转</td><td align="center">$\operatorname{REVERSE} \ posi \ tot$</td><td align="left">取出从当前数列的第 $posi$ 个数字开始的 $tot$ 个数字，翻转后放入原来的位置</td></tr><tr><td align="center">5</td><td align="center">求和</td><td align="center">$\operatorname{GET-SUM} \ posi \ tot$</td><td align="left">计算从当前数列的第 $posi$ 个数字开始的 $tot$ 个数字的和并输出</td></tr><tr><td align="center">6</td><td align="center">求最大子列和</td><td align="center">$\operatorname{MAX-SUM}$</td><td align="left">求出当前数列中和最大的一段子列，并输出最大和</td></tr></tbody></table><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 $N$ 和 $M$，$N$ 表示初始时数列中数的个数，$M$ 表示要进行的操作数目。</p><p>第二行包含 $N$ 个数字，描述初始时的数列。以下 $M$ 行，每行一条命令，格式参见问题描述中的表格。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于输入数据中的 $\operatorname{GET-SUM}$ 和 $\operatorname{MAX-SUM}$ 操作，向输出文件依次打印结果，每个答案（数字）占一行。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">9</span> <span class="number">8</span> </span><br><span class="line"><span class="attribute">2</span> -<span class="number">6</span> <span class="number">3</span> <span class="number">5</span> <span class="number">1</span> -<span class="number">5</span> -<span class="number">3</span> <span class="number">6</span> <span class="number">3</span> </span><br><span class="line"><span class="attribute">GET</span>-SUM <span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="attribute">MAX</span>-SUM</span><br><span class="line"><span class="attribute">INSERT</span> <span class="number">8</span> <span class="number">3</span> -<span class="number">5</span> <span class="number">7</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">DELETE</span> <span class="number">12</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">MAKE</span>-SAME <span class="number">3</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">REVERSE</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="attribute">GET</span>-SUM <span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="attribute">MAX</span>-SUM</span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-1</span></span><br><span class="line">10</span><br><span class="line">1</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><ul><li>你可以认为在任何时刻，数列中至少有 $1$ 个数。</li><li>输入数据一定是正确的，即指定位置的数在数列中一定存在。</li><li>对于 $50%$ 的数据，任何时刻数列中最多含有 $3 \times 10^4$ 个数。</li><li>对于 $100%$ 的数据，任何时刻数列中最多含有 $5 \times 10^5$ 个数，任何时刻数列中任何一个数字均在 $[-10^3, 10^3]$ 内，$1 \le M \le 2 \times 10^4$，插入的数字总数不超过 $4 \times 10^6$。</li></ul><hr><h2 id="一、伸展树"><a href="#一、伸展树" class="headerlink" title="一、伸展树"></a>一、伸展树</h2><p>伸展树$(Splay Tree)$，也叫分裂树，是一种二叉排序树，它能在$O(logN)$内完成插入、查找和删除操作。</p><p>在伸展树上的一般操作都基于伸展操作：<br>假设想要对一个二叉查找树执行一系列的查找操作，为了使整个查找时间更小，被查频率高的那些条目就应当经常处于靠近树根的位置。于是想到设计一个简单方法， 在每次查找之后对树进行重构，把被查找的条目搬移到离树根近一些的地方。伸展树应运而生。伸展树是一种自调整形式的二叉查找树，它会沿着从某个节点到树根之间的路径，通过一系列的旋转把这个节点搬移到树根去。</p><p><strong>伸展树的核心思想为：每操作一个结点，就将改结点旋转至树根</strong></p><hr><h2 id="二、左旋和右旋"><a href="#二、左旋和右旋" class="headerlink" title="二、左旋和右旋"></a>二、左旋和右旋</h2><p><img src="https://cdn.acwing.com/media/article/image/2024/01/23/58452_2121e365b9-a1c93ac051306a6624d317137bc1021.png" alt="a1c93ac051306a6624d317137bc1021.png"><br><strong>这里可以统一为自旋</strong><br>以下图为例子，更新红色的边的关系即可<br><img src="https://cdn.acwing.com/media/article/image/2024/01/23/58452_4e8e70b3b9-3cc8a6c7d3f0617fd5bfde3ffdfa89c.png" alt="3cc8a6c7d3f0617fd5bfde3ffdfa89c.png"> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自旋函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">    <span class="comment">// k = 0表示x是y的左儿子，k = 1表示x是y的右儿子</span></span><br><span class="line">    <span class="type">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 以k = 0的情况写即可</span></span><br><span class="line">    tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x, tr[x].p = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].p = y;</span><br><span class="line">    tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].p = x;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 旋转后需pushup</span></span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、旋转方式："><a href="#三、旋转方式：" class="headerlink" title="三、旋转方式："></a>三、旋转方式：</h2><p>对于结点$x$，其存在两种不同的树结构，对应不同的旋转方式<br><img src="https://cdn.acwing.com/media/article/image/2024/01/23/58452_95423ed8b9-9e3b27ca09ef705df8e5cdabb0e9bc6.png" alt="9e3b27ca09ef705df8e5cdabb0e9bc6.png"><br><img src="https://cdn.acwing.com/media/article/image/2024/01/23/58452_912436a0b9-8f3f193afbba38f9ee0d3a7dc2d03a2.png" alt="8f3f193afbba38f9ee0d3a7dc2d03a2.png"><br>即：<br><strong>直链状</strong>： 先转$y$，再转$x$<br><strong>非直链状</strong>：连续转两次$x$</p><h4 id="Splay操作（核心）"><a href="#Splay操作（核心）" class="headerlink" title="Splay操作（核心）"></a>Splay操作（核心）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心函数，将结点x旋转至k结点的下面</span></span><br><span class="line"><span class="comment">// k = 0时，表示将x旋转至根</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(tr[x].p != k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// z不是k时，需要旋转两次</span></span><br><span class="line">        <span class="keyword">if</span>(z != k)</span><br><span class="line">            <span class="comment">// 如果z, y, x的关系不是直链时，先旋转x</span></span><br><span class="line">            <span class="comment">// 否则先旋转y</span></span><br><span class="line">            <span class="keyword">if</span>((tr[z].s[<span class="number">0</span>] == y) != (tr[y].s[<span class="number">0</span>] == x)) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 最后再旋转x</span></span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// k = 0时, 表示将x旋转至根</span></span><br><span class="line">    <span class="keyword">if</span>(!k) root = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、-pushup-和-pushdown"><a href="#四、-pushup-和-pushdown" class="headerlink" title="四、$pushup$和$pushdown$"></a>四、$pushup$和$pushdown$</h2><p>$pushup函数$在旋转结点后调用，使用子结点的信息更新当前结点的信息<br>$pushdown函数$在递归之前调用，使用当前结点的信息更新子结点的信息</p><hr><h2 id="五、完整代码"><a href="#五、完整代码" class="headerlink" title="五、完整代码"></a>五、完整代码</h2><h3 id="时间复杂度：-O-MlogN"><a href="#时间复杂度：-O-MlogN" class="headerlink" title="时间复杂度：$O(MlogN)$"></a>时间复杂度：$O(MlogN)$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500010</span>, M = <span class="number">21</span>, INF = <span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">2</span>], p;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> sum, lsum, rsum, msum;</span><br><span class="line">    <span class="type">int</span> same, rev;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _val, <span class="type">int</span> _p)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[<span class="number">0</span>] = s[<span class="number">1</span>] = <span class="number">0</span>, p = _p;</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        same = rev = <span class="number">0</span>;</span><br><span class="line">        val = sum = msum = _val;</span><br><span class="line">        lsum = rsum = <span class="built_in">max</span>(<span class="number">0</span>, _val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; tr[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> root;</span><br><span class="line"><span class="type">int</span> nodes[N], top;  <span class="comment">// 内存回收机制, 类似栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;u = tr[x], &amp;l = tr[tr[x].s[<span class="number">0</span>]], &amp;r = tr[tr[x].s[<span class="number">1</span>]];</span><br><span class="line">    <span class="comment">// 记得考虑u本身</span></span><br><span class="line">    u.size = l.size + r.size + <span class="number">1</span>;</span><br><span class="line">    u.sum = l.sum + r.sum + u.val;</span><br><span class="line">    u.msum = <span class="built_in">max</span>(<span class="built_in">max</span>(l.msum, r.msum), l.rsum + u.val + r.lsum);</span><br><span class="line">    u.lsum = <span class="built_in">max</span>(l.lsum, l.sum + u.val + r.lsum);</span><br><span class="line">    u.rsum = <span class="built_in">max</span>(r.rsum, r.sum + u.val + l.rsum);       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;u = tr[x], &amp;l = tr[tr[x].s[<span class="number">0</span>]], &amp;r = tr[tr[x].s[<span class="number">1</span>]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(u.same)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u.s[<span class="number">0</span>]) l.same = <span class="number">1</span>, l.val = u.val, l.sum = u.val * l.size;</span><br><span class="line">        <span class="keyword">if</span>(u.s[<span class="number">1</span>]) r.same = <span class="number">1</span>, r.val = u.val, r.sum = u.val * r.size;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(u.val &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(u.s[<span class="number">0</span>]) l.msum = l.lsum = l.rsum = l.sum;</span><br><span class="line">            <span class="keyword">if</span>(u.s[<span class="number">1</span>]) r.msum = r.lsum = r.rsum = r.sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(u.s[<span class="number">0</span>]) l.msum = u.val, l.lsum = l.rsum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(u.s[<span class="number">1</span>]) r.msum = u.val, r.lsum = r.rsum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        u.same = u.rev = <span class="number">0</span>; <span class="comment">// 整个区间都变成同一个数，rev标签没用意义，也需要清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(u.rev)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u.s[<span class="number">0</span>]) l.rev ^= <span class="number">1</span>, <span class="built_in">swap</span>(l.s[<span class="number">0</span>], l.s[<span class="number">1</span>]), <span class="built_in">swap</span>(l.lsum, l.rsum);</span><br><span class="line">        <span class="keyword">if</span>(u.s[<span class="number">1</span>]) r.rev ^= <span class="number">1</span>, <span class="built_in">swap</span>(r.s[<span class="number">0</span>], r.s[<span class="number">1</span>]), <span class="built_in">swap</span>(r.lsum, r.rsum);</span><br><span class="line">        u.rev = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">    <span class="type">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line">    </span><br><span class="line">    tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x, tr[x].p = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].p = y;</span><br><span class="line">    tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].p = x;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(tr[x].p != k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">        <span class="keyword">if</span>(z != k)</span><br><span class="line">            <span class="keyword">if</span>((tr[z].s[<span class="number">1</span>] == y) == (tr[y].s[<span class="number">1</span>] == x)) <span class="built_in">rotate</span>(y);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(x);</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) root = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_k</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = root;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="keyword">if</span>(tr[tr[u].s[<span class="number">0</span>]].size &gt;= k) u = tr[u].s[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[tr[u].s[<span class="number">0</span>]].size + <span class="number">1</span> == k) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">else</span> k -= tr[tr[u].s[<span class="number">0</span>]].size + <span class="number">1</span>, u = tr[u].s[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归建立splay, p为父结点信息</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> u = nodes[top --];  <span class="comment">// 分配结点</span></span><br><span class="line">    tr[u].<span class="built_in">init</span>(w[mid], p);  <span class="comment">// 结点初始化</span></span><br><span class="line">    <span class="comment">// 递归创建儿子结点</span></span><br><span class="line">    <span class="keyword">if</span>(l &lt; mid) tr[u].s[<span class="number">0</span>] = <span class="built_in">build</span>(l, mid - <span class="number">1</span>, u);  <span class="comment">// 左区间为[l, mid - 1]</span></span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) tr[u].s[<span class="number">1</span>] = <span class="built_in">build</span>(mid + <span class="number">1</span>, r, u);  <span class="comment">// 右区间为[mid + 1, r]</span></span><br><span class="line">    <span class="comment">// 记得pushup</span></span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归回收根结点为u的子树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].s[<span class="number">0</span>]) <span class="built_in">dfs</span>(tr[u].s[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(tr[u].s[<span class="number">1</span>]) <span class="built_in">dfs</span>(tr[u].s[<span class="number">1</span>]);</span><br><span class="line">    nodes[++ top] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i ++) nodes[++ top] = i;  <span class="comment">// 初始化结点存储栈</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="comment">// 初始化哨兵</span></span><br><span class="line">    w[<span class="number">0</span>] = w[n + <span class="number">1</span>] = -INF;</span><br><span class="line">    <span class="comment">// 0号点是空结点的编号，结点初始化tr[0]信息</span></span><br><span class="line">    tr[<span class="number">0</span>].msum = -INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    root = <span class="built_in">build</span>(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[M];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op, <span class="string">&quot;INSERT&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> posi, tot;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;posi, &amp;tot);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">get_k</span>(posi + <span class="number">1</span>), r = <span class="built_in">get_k</span>(posi + <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            tr[r].s[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>, tot, r);</span><br><span class="line">            <span class="built_in">pushup</span>(r), <span class="built_in">pushup</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op, <span class="string">&quot;DELETE&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> posi, tot;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;posi, &amp;tot);</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">get_k</span>(posi), r = <span class="built_in">get_k</span>(posi + tot + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            <span class="built_in">dfs</span>(tr[r].s[<span class="number">0</span>]);</span><br><span class="line">            tr[r].s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">pushup</span>(r), <span class="built_in">pushup</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op, <span class="string">&quot;MAKE-SAME&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> posi, tot, c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;posi, &amp;tot, &amp;c);</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">get_k</span>(posi), r = <span class="built_in">get_k</span>(posi + tot + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            <span class="keyword">auto</span> &amp;u = tr[tr[r].s[<span class="number">0</span>]];</span><br><span class="line">            u.same = <span class="number">1</span>;</span><br><span class="line">            u.val = c, u.sum = c * u.size;</span><br><span class="line">            <span class="keyword">if</span>(c &gt; <span class="number">0</span>) u.msum = u.lsum = u.rsum = u.sum;</span><br><span class="line">            <span class="keyword">else</span> u.msum = c, u.lsum = u.rsum = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">pushup</span>(r), <span class="built_in">pushup</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op, <span class="string">&quot;REVERSE&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> posi, tot;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;posi, &amp;tot);</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">get_k</span>(posi), r = <span class="built_in">get_k</span>(posi + tot + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            <span class="keyword">auto</span> &amp;u = tr[tr[r].s[<span class="number">0</span>]];</span><br><span class="line">            u.rev ^= <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">swap</span>(u.s[<span class="number">0</span>], u.s[<span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">swap</span>(u.lsum, u.rsum);</span><br><span class="line">            <span class="built_in">pushup</span>(r), <span class="built_in">pushup</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op, <span class="string">&quot;GET-SUM&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> posi, tot;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;posi, &amp;tot);</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">get_k</span>(posi), r = <span class="built_in">get_k</span>(posi + tot + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">splay</span>(l, <span class="number">0</span>), <span class="built_in">splay</span>(r, l);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tr[tr[r].s[<span class="number">0</span>]].sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(op, <span class="string">&quot;MAX-SUM&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tr[root].msum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>$Manacher$算法</title>
      <link href="/2024/03/03/manacher/"/>
      <url>/2024/03/03/manacher/</url>
      
        <content type="html"><![CDATA[<h1 id="例题：回文串"><a href="#例题：回文串" class="headerlink" title="例题：回文串"></a>例题：<a href="https://www.dotcpp.com/oj/problem1200.html">回文串</a></h1><p>$Manacher$算法，又叫“马拉车”算法，只适用于在时间复杂度为$O(N)$的情况下求解一个字符串的最长回文子串长度的问题。</p><h2 id="一、预处理"><a href="#一、预处理" class="headerlink" title="一、预处理"></a>一、预处理</h2><p>回文串长度个数为奇数，则其对称位置在某个字符。否则在两个字符中间，非常不利于计算回文串长度。</p><p>处理方法： 在字符串两边加 ‘#’ ，任意两个字符串之间加 ‘#’。<br>字符串新长度 $&#x3D;$ 原长度 $\times$ 2 $+$ 1；（’#’ 个数始终比原字符个数多 1）。这样的处理保证了任意字符串都是奇数字符串。如果知道回文字符串的半径就可以求出字符串长度，也就可以求出原字符串长度。</p><p>原字符串长度 $&#x3D;$ （字符串长度 $-$ 1）$&#x2F;$ 2 $&#x3D;$ （r $\times$ 2 $-$ 1 $-$ 1）$&#x2F;$ 2 $&#x3D;$ r $-$ 1。（假设该字符串就是回文串，因此字符串长度 &#x3D; r $\times$ 2 $-$ 1，因此规定一个字符的回文串半径为 1）</p><p>关于 字符串长度 $&#x3D;$ r $\times$ 2 $-$ 1 有如下示意。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">old_str: a b a</span><br><span class="line">new_str: $ <span class="meta"># a # b # a # ^</span></span><br><span class="line">   r   : <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="二、算法过程"><a href="#二、算法过程" class="headerlink" title="二、算法过程"></a>二、算法过程</h2><p>维护一个最靠右边的回文串 $(sl-sr)$，计算一个记录着以当前字符 $b[i]$ 为中心的回文串的半径 $p[i]$。每次计算有以下情形：</p><p>更新 $p[i]$ 时可以利用对称性:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//i 在 mr 的内部: p[i] = min(p[j], mr - i)   j为i的对称点  j = 2 * mid - i</span></span><br><span class="line"><span class="keyword">if</span>(i &lt; mr) p[i] = <span class="built_in">min</span>(p[mid * <span class="number">2</span> - i], mr - i); </span><br></pre></td></tr></table></figure><p>$p[i]$ 关于 最右回文串的对称字符串在 $(sl-sr)$ 范围内，那么 $p[i]$ &#x3D; $p[j]$ ($j$ 为对称子串的中心)不在范围内，因为$(sl - sr)$ 是最右的回文串，所以 $p[i]$ 等于其对称子串在 $(sl-sr)$ 中的最大半径。（因为其对称子串范围超过了 $(sl-sr)$，且 $(sl-sr)$ 无法向右扩张，即 $str[sr + 1] !&#x3D; str[sl - 1]$。 那么此时 $p[i]$ 就等于其对称子串在$(sl-sr)$范围内的半径）</p><p>不可以利用对称性就暴力向外扩张的求 $p[i]$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p[i] = <span class="number">1</span>; </span><br><span class="line"><span class="comment">// 每次暴力往两边扩展</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构字符串时有添加边界&#x27;$&#x27;和&#x27;^&#x27;, 这里不需要判断是否越界</span></span><br><span class="line"> <span class="keyword">while</span>(b[i - p[i]] == b[i + p[i]]) p[i] ++; </span><br></pre></td></tr></table></figure><p>计算结束后，用本次 p[i] 更新 最靠右的回文子串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新mr 和 mid</span></span><br><span class="line"><span class="keyword">if</span>(mr &lt; i + p[i])</span><br><span class="line">&#123;</span><br><span class="line">    mr = i + p[i];</span><br><span class="line">    mid = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、图解"><a href="#三、图解" class="headerlink" title="三、图解"></a>三、图解</h2><p><img src="https://cdn.acwing.com/media/article/image/2024/01/28/58452_c55c358dbd-249c680788f694a807ed4dde6dddd58.png" alt="249c680788f694a807ed4dde6dddd58.png"> </p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><h4 id="时间复杂度：-O-N"><a href="#时间复杂度：-O-N" class="headerlink" title="时间复杂度：$O(N)$"></a>时间复杂度：$O(N)$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变换原串, 使得原串中任何一个回文串对应到新串里都是一个长度为 奇数 的回文串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    b[k ++] = <span class="string">&#x27;$&#x27;</span>, b[k ++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) b[k ++] = a[i], b[k ++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    b[k ++] = <span class="string">&#x27;^&#x27;</span>;</span><br><span class="line">    n = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// mr为最靠右的回文串的右边界（开区间，mr为右边界的下一个点），mid为中点</span></span><br><span class="line">    <span class="type">int</span> mr = <span class="number">0</span>, mid = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//i 在 mr 的内部: p[i] = min(p[j], mr - i)   j为i的对称点  j = 2 * mid - i</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; mr) p[i] = <span class="built_in">min</span>(p[mid * <span class="number">2</span> - i], mr - i); </span><br><span class="line">        <span class="comment">// 否则 p[i] 从 1开始</span></span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次暴力往两边扩展</span></span><br><span class="line">        <span class="keyword">while</span>(b[i - p[i]] == b[i + p[i]]) p[i] ++; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新mr 和 mid</span></span><br><span class="line">        <span class="keyword">if</span>(mr &lt; i + p[i])</span><br><span class="line">        &#123;</span><br><span class="line">            mr = i + p[i];</span><br><span class="line">            mid = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a);</span><br><span class="line">    n = <span class="built_in">strlen</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">manacher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 原串的回文串长度 对应 新串中的回文串半径（包括str[i]）减1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) res = <span class="built_in">max</span>(res, p[i] - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 最长回文字串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回滚莫队</title>
      <link href="/2024/03/03/hgmq/"/>
      <url>/2024/03/03/hgmq/</url>
      
        <content type="html"><![CDATA[<h1 id="例题：历史的研究"><a href="#例题：历史的研究" class="headerlink" title="例题：历史的研究"></a>例题：<a href="https://www.luogu.com.cn/problem/AT_joisc2014_c">历史的研究</a></h1><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>$IOI$ 国历史研究的第一人——$JOI$ 教授，最近获得了一份被认为是古代 $IOI$ 国的住民写下的日记。$JOI$ 教授为了通过这份日记来研究古代 $IOI$ 国的生活，开始着手调查日记中记载的事件。</p><p>日记中记录了连续 $N$ 天发生的事件，大约每天发生一件。</p><p>事件有种类之分。第 $i$ 天发生的事件的种类用一个整数 $X_i$<br>表示，$X_i$ 越大，事件的规模就越大。</p><p>$JOI$ 教授决定用如下的方法分析这些日记：</p><ul><li><p>选择日记中连续的几天 $[L,R]$ 作为分析的时间段；</p></li><li><p>定义事件 $A$ 的重要度 $W_A$ 为 $A\times T_A$，其中 $T_A$ 为该事件在区间 $[L,R]$ 中出现的次数。</p></li></ul><p>现在，您需要帮助教授求出所有事件中重要度最大的事件是哪个，<strong>并输出其重要度</strong>。</p><p>注意：教授有多组询问。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个空格分隔的整数 $N$ 和 $Q$，表示日记一共记录了 $N$ 天，询问有 $Q$ 次。</p><p>接下来一行 $N$ 个空格分隔的整数表示每天的事件种类。</p><p>接下来 $Q$ 行，每行给出 $L,R$ 表示一组询问。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共有 $Q$ 行，每行一个整数，表示对应的询问的答案。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 $100%$ 的数据，$1\le Q,N\le 10^5$，$1\le X\le 10^9$，$1\le L\le R\le 10^5$。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">9 </span><span class="number">8</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">8</span><br><span class="line">8</span><br><span class="line">16</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">8 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">9 </span><span class="number">9</span> <span class="number">19</span> <span class="number">9</span> <span class="number">9</span> <span class="number">15</span> <span class="number">9</span> <span class="number">19</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">27</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">19</span><br></pre></td></tr></table></figure><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入 #3"></a>样例输入 #3</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">12 </span><span class="number">15</span></span><br><span class="line"><span class="symbol">15 </span><span class="number">9</span> <span class="number">3</span> <span class="number">15</span> <span class="number">9</span> <span class="number">3</span> <span class="number">3</span> <span class="number">8</span> <span class="number">16</span> <span class="number">9</span> <span class="number">3</span> <span class="number">17</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">10</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">10</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">8</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出 #3"></a>样例输出 #3</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">18</span><br><span class="line">18</span><br><span class="line">9</span><br><span class="line">30</span><br><span class="line">18</span><br><span class="line">15</span><br><span class="line">17</span><br><span class="line">30</span><br><span class="line">18</span><br><span class="line">15</span><br><span class="line">18</span><br><span class="line">16</span><br><span class="line">30</span><br><span class="line">15</span><br><span class="line">15</span><br></pre></td></tr></table></figure><hr><h2 id="一、回滚莫队算法"><a href="#一、回滚莫队算法" class="headerlink" title="一、回滚莫队算法"></a>一、回滚莫队算法</h2><p>分析题目，没有修改，只有问询，似乎只是一个普通莫队。但如果用普通莫队去做就会发现写不了删点操作，因为无法确定删除掉的是不是最大的那个。</p><p>所以我们就改变一下思路：<br>既然删点难写那么咱们就改变思路：不删点。<br>但每个问询区间大小不一，无法保持只加点不删点。<br>其实可以保持右端点只增不减，对于左端每次增点后用暴力把增点数据删除（即回滚）即可。</p><p><img src="https://cdn.acwing.com/media/article/image/2024/02/16/58452_a1a737dccc-8330_15bc7d0015-BZOJ4241-01.jpg" alt="8330_15bc7d0015-BZOJ4241-01.jpg"> </p><p>由于要保证右端点只增不减，即不能使用奇偶优化。排序函数这么写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(q, q + m, [&amp;](<span class="type">const</span> Query &amp;x, <span class="type">const</span> Query &amp;y) &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="built_in">get</span>(x.l), j = <span class="built_in">get</span>(y.l);</span><br><span class="line">        <span class="comment">// 回滚莫队不能用奇偶优化</span></span><br><span class="line">        <span class="keyword">if</span>(i == j) <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">        <span class="keyword">return</span> i &lt; j;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h2><h3 id="时间复杂度：-O-M-sqrt-N"><a href="#时间复杂度：-O-M-sqrt-N" class="headerlink" title="时间复杂度：$O(M\sqrt{N})$"></a>时间复杂度：$O(M\sqrt{N})$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, l, r;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line">LL res[N];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, LL &amp;sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[x] ++;</span><br><span class="line">    sum = <span class="built_in">max</span>(sum, (LL)cnt[x] * nums[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line">        a[i] = <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), a[i]) - nums.<span class="built_in">begin</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        q[i] = &#123;i, l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(q, q + m, [&amp;](<span class="type">const</span> Query &amp;x, <span class="type">const</span> Query &amp;y) &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="built_in">get</span>(x.l), j = <span class="built_in">get</span>(y.l);</span><br><span class="line">        <span class="comment">// 回滚莫队不能用奇偶优化</span></span><br><span class="line">        <span class="keyword">if</span>(i == j) <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">        <span class="keyword">return</span> i &lt; j;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt; m; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = x;</span><br><span class="line">        <span class="keyword">while</span>(y &lt; m &amp;&amp; <span class="built_in">get</span>(q[x].l) == <span class="built_in">get</span>(q[y].l)) y ++;</span><br><span class="line">        <span class="comment">// 当前块最靠右的端点: k * len + len - 1</span></span><br><span class="line">        <span class="type">int</span> mr = <span class="built_in">get</span>(q[x].l) * len + (len - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 暴力求解块内</span></span><br><span class="line">        <span class="keyword">while</span>(x &lt; y &amp;&amp; <span class="built_in">get</span>(q[x].l) == <span class="built_in">get</span>(q[x].r))</span><br><span class="line">        &#123;</span><br><span class="line">            LL sum = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> id = q[x].id, l = q[x].l, r = q[x].r;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) <span class="built_in">add</span>(a[i], sum);</span><br><span class="line">            res[id] = sum;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) cnt[a[i]] --;</span><br><span class="line">            x ++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求解块间</span></span><br><span class="line">        LL sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = mr, j = mr + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &lt; y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id = q[x].id, l = q[x].l, r = q[x].r;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; r) <span class="built_in">add</span>(a[++ i], sum);</span><br><span class="line">            <span class="comment">// 每次备份块外的sum, 后续回滚</span></span><br><span class="line">            LL backup = sum;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; l) <span class="built_in">add</span>(a[-- j], sum);</span><br><span class="line">            res[id] = sum;</span><br><span class="line">            <span class="comment">// 回滚</span></span><br><span class="line">            <span class="keyword">while</span>(j &lt; mr + <span class="number">1</span>) cnt[a[j ++]] --;</span><br><span class="line">            sum = backup;</span><br><span class="line">            x ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每次记得清空cnt, 保证每块的操作前, cnt数组是空的</span></span><br><span class="line">        <span class="comment">// 只会执行sqrt(n)次, 不会影响时间复杂度</span></span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 莫队算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素莫队</title>
      <link href="/2024/03/02/mq/"/>
      <url>/2024/03/02/mq/</url>
      
        <content type="html"><![CDATA[<h1 id="例题：HH的项链"><a href="#例题：HH的项链" class="headerlink" title="例题：HH的项链"></a>例题：<a href="https://www.luogu.com.cn/problem/P1972">HH的项链</a></h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>$HH$有一串由各种漂亮的贝壳组成的项链。$HH$ 相信不同的贝壳会带来好运，所以每次散步完后，他都会随意取出一段贝壳，思考它们所表达的含义。$HH$ 不断地收集新的贝壳，因此，他的项链变得越来越长。  </p><p>有一天，他突然提出了一个问题：某一段贝壳中，包含了多少种不同的贝壳？这个问题很难回答…… 因为项链实在是太长了。于是，他只好求助睿智的你，来解决这个问题。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行一个正整数 $n$，表示项链长度。<br>第二行 $n$ 个正整数 $a_i$，表示项链中第 $i$ 个贝壳的种类。</p><p>第三行一个整数 $m$，表示 $HH$ 询问的个数。<br>接下来 $m$ 行，每行两个整数 $l,r$，表示询问的区间。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出 $m$ 行，每行一个整数，依次表示询问对应的答案。</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】  </p><p>对于 $20%$ 的数据，$1\le n,m\leq 5000$；<br>对于 $40%$ 的数据，$1\le n,m\leq 10^5$；<br>对于 $60%$ 的数据，$1\le n,m\leq 5\times 10^5$；<br>对于 $100%$ 的数据，$1\le n,m,a_i \leq 10^6$，$1\le l \le r \le n$。</p><p>本题可能需要较快的读入方式，最大数据点读入数据约 20MB</p><hr><h2 id="一、暴力算法"><a href="#一、暴力算法" class="headerlink" title="一、暴力算法"></a>一、暴力算法</h2><p>直接暴力枚举询问，然后再枚举区间，这样是$O(n^2)$的</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>如果说询问是按照左端点递增和右端点递增的，<br>那么就可以离线排序，用线性的时间扫过去所有询问，用哈希表记录一下就行，同时记录答案。<br>但是两个端点不能同时递增的，最多保证一个递增。</p><hr><h2 id="二、莫队算法"><a href="#二、莫队算法" class="headerlink" title="二、莫队算法"></a>二、莫队算法</h2><p>把询问的左端点按照分块的思想分成$\sqrt{n}$块，然后每一块里面的询问$[l,r]$按照右端点递增排序。</p><p>在块中：询问区间的右端点是递增的，但是区间的左端点不是递增的；</p><p>在块间：左端点是递增的，而右端点不是递增的**(这样就需要指针的移动和回滚，才有了下面的奇偶优化)**。</p><p>定义两个指针$tt$(向$r$靠齐)，$hh$(向$l$靠齐)，<br>然后开始遍历排好序的询问，枚举每个询问$[l,r]$，移动$hh$，$tt$，分别向$l$，$r$靠齐，<br>同时用一个哈希表记录一下数字出现的个数，同时更新答案即可。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>原序列被分成$\sqrt{n}$块，每块长度是$\sqrt{n}$，每块中的询问按照询问右端点递增排序。</p><p>那么：</p><p>$tt$(向$r$靠齐)指针在每一块中，最坏可能移动$n$次，有$\sqrt{n}$块，所以是$O(n\sqrt{n})$。</p><p>$hh$(向$l$靠齐)指针如果在块中移动，最多移动$\sqrt{n}$次。在块间，则最多移动2$\sqrt{n}$次(从这一块的头移动到下一块的尾)。</p><p>最终，双指针时间复杂度取最大值，即为$O(n\sqrt{n})$。</p><h3 id="奇偶优化"><a href="#奇偶优化" class="headerlink" title="奇偶优化"></a>奇偶优化</h3><p>由于每一块中右端点是按从小到大排序的，所以每一块在滚$i$指针时。<br>滚到最后大概率会滚到整个序列的末尾，然后处理下一块时，右端点$r$又是从小到大排的。<br>所以$i$得从后面滚回来前面这个$r$，这样就浪费了时间。</p><p>如果按奇数块右端点递增排序,偶数块右端点递减排序。<br>那么指针$i$滚到末尾，然后下一块又是递减排序的话，则可以直接开始滚了，不用滚回来再从新开始。</p><hr><h2 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h2><h3 id="时间复杂度：-O-M-sqrt-N"><a href="#时间复杂度：-O-M-sqrt-N" class="headerlink" title="时间复杂度：$O(M\sqrt{N})$"></a>时间复杂度：$O(M\sqrt{N})$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>, M = <span class="number">1000010</span>, K = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, l, r;</span><br><span class="line">&#125; q[M];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> cnt[K], len;</span><br><span class="line"><span class="type">int</span> res[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span>&amp; ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt[x] == <span class="number">0</span>) ans ++;</span><br><span class="line">    cnt[x] ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span>&amp; ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[x] --;</span><br><span class="line">    <span class="keyword">if</span>(cnt[x] == <span class="number">0</span>) ans --;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        q[i] = &#123;i, l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(q, q + m, [&amp;](<span class="type">const</span> query&amp; x, <span class="type">const</span> query&amp; y) &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="built_in">get</span>(x.l), j = <span class="built_in">get</span>(y.l); </span><br><span class="line">        <span class="keyword">if</span>(i == j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 奇升偶降优化</span></span><br><span class="line">            <span class="keyword">if</span>(i &amp; <span class="number">1</span>) <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> y.r &lt; x.r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i &lt; j;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// tt为双指针的右指针, hh为双指针的左指针</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>, tt = <span class="number">0</span>, hh = <span class="number">1</span>; k &lt; m; k ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> id = q[k].id, l = q[k].l, r = q[k].r;</span><br><span class="line">        <span class="keyword">while</span>(tt &lt; r) <span class="built_in">add</span>(a[++ tt], sum);</span><br><span class="line">        <span class="keyword">while</span>(tt &gt; r) <span class="built_in">del</span>(a[tt --], sum);</span><br><span class="line">        <span class="keyword">while</span>(hh &lt; l) <span class="built_in">del</span>(a[hh ++], sum);</span><br><span class="line">        <span class="keyword">while</span>(hh &gt; l) <span class="built_in">add</span>(a[-- hh], sum);</span><br><span class="line">        res[id] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、树状数组（正解）"><a href="#四、树状数组（正解）" class="headerlink" title="四、树状数组（正解）"></a>四、树状数组（正解）</h2><h3 id="时间复杂度：-O-MlogN"><a href="#时间复杂度：-O-MlogN" class="headerlink" title="时间复杂度：$O(MlogN)$"></a>时间复杂度：$O(MlogN)$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>, M = <span class="number">1000010</span>, K = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], last[K];</span><br><span class="line"><span class="type">int</span> res[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Query &amp;x) &#123; <span class="keyword">return</span> r &lt; x.r; &#125;</span><br><span class="line">&#125; q[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) tr[i] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        q[i] = &#123;i, l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q, q + m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(last[a[i]]) <span class="built_in">add</span>(last[a[i]], <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">add</span>(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(j &lt; m &amp;&amp; q[j].r == i) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id = q[j].id, l = q[j].l;</span><br><span class="line">            res[id] = <span class="built_in">query</span>(i) - <span class="built_in">query</span>(l - <span class="number">1</span>);</span><br><span class="line">            j ++;</span><br><span class="line">        &#125;</span><br><span class="line">        last[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 莫队算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
